import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchAllProducts, fetchAllProductsByFilters , fetchAllBrands , fetchAllCategories, fetchProductsbyId} from './ProductAPI';

const initialState = {
  products: [],
  brands:[],
  categories:[],
  status: 'idle',
  totalItems:0,
  selectedProduct:null
};


export const fetchAllProductsAsync = createAsyncThunk(
  'product/fetchAllProducts',
  async () => {
    const response = await fetchAllProducts();
    return response.data;
  }
);


export const fetchBrandsAsync = createAsyncThunk(
  'product/fetchBrandsAsync',
  async () => {
    const response = await fetchAllBrands();
    return response.data;
  }
);

export const fetchCategoriesAsync = createAsyncThunk(
  'product/fetchCategoriesAsync',
  async () => {
    const response = await fetchAllCategories();
    return response.data;
  }
);

export const fetchAllProductsByFiltersAsync = createAsyncThunk(
  'product/fetchAllProductsByFiltersAsync',
async ({filter , sort , pagination}) => {
    const response = await fetchAllProductsByFilters(filter , sort , pagination);
    return response.data;
  }
);


// Fetch products by id 


export const fetchAllProductsbyIDAsync = createAsyncThunk(
  'product/fetchAllProductsbyIDAsync',
  async (id) => {
    const response = await fetchProductsbyId(id);
    return response.data;
  }
);






export const productSlice = createSlice({
  name: 'product',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
     
      state.value += 1;
    },
    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAllProductsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAllProductsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.products = action.payload;
      })
      .addCase(fetchAllProductsByFiltersAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAllProductsByFiltersAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.products = action.payload.product;
        state.totalItems = action.payload.totalItems;

      })
      .addCase(fetchCategoriesAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchCategoriesAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.categories = action.payload;
      })
      .addCase(fetchBrandsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchBrandsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.brands = action.payload;
      })
      .addCase(fetchAllProductsbyIDAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAllProductsbyIDAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.selectedProduct = action.payload;
      })
  },
});

export const { increment } = productSlice.actions;


export const selectAllProducts = (state  => state.product.products);
export const selectBrands = (state  => state.product.brands);
export const selectCategories = (state  => state.product.categories);
export const selectProductById = (state  => state.product.selectedProduct);



export const selectTotalItems = (state  => state.product.totalItems);




export default productSlice.reducer;
